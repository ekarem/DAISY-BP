
#define CONV29Y_GROUP_SIZE_X 16
#define CONV29Y_GROUP_SIZE_Y 16

__kernel void convolve_29y(__global   float * massArray,
                           __constant float * fltArray,
                           __local    float * lclArray,
                           const      int     pddWidth,
                           const      int     pddHeight)
{

    const int r = get_global_id(1);
    const int c = get_global_id(0);

    const int srcOffset = r * pddWidth + c + pddWidth * pddHeight * 8 * 3; // section D

    const int lx = get_local_id(0);
    const int ly = get_local_id(1);

    fltArray += (7+11+23);

    // Load main data first
    lclArray[(ly+14) * (CONV29Y_GROUP_SIZE_X+1) + lx] = massArray[srcOffset];

    // Load local upper halo second
    if(ly < 14){
      lclArray[ly * (CONV29Y_GROUP_SIZE_X+1) + lx] = ((r % pddHeight) > 13 ? massArray[srcOffset-14*pddWidth]:lclArray[14 * (CONV29Y_GROUP_SIZE_X+1) + lx]);
    }

    // Load local lower halo third
    if(ly > CONV29Y_GROUP_SIZE_Y-15){
      lclArray[(ly+28) * (CONV29Y_GROUP_SIZE_X+1) + lx] = ((r % pddHeight) < pddHeight-14 ? massArray[srcOffset+14*pddWidth]:lclArray[(14+CONV29Y_GROUP_SIZE_Y-1) * (CONV29Y_GROUP_SIZE_X+1) + lx]);
    }

    barrier(CLK_LOCAL_MEM_FENCE);

    float s = 0;
    for(int i = ly; i < ly+29; i++)
      s += lclArray[i * (CONV29Y_GROUP_SIZE_X+1) + lx] * fltArray[i-ly];

    const int dstOffset = srcOffset - pddWidth * pddHeight * 8; // section C
    massArray[dstOffset] = s;
}


  /*

  gettimeofday(&startFullTime,NULL);
  gettimeofday(&startParaTime,NULL);
  gettimeofday(&endParaTime,NULL);

  startt = startParaTime.tv_sec+(startParaTime.tv_usec/1000000.0);
  endt = endParaTime.tv_sec+(endParaTime.tv_usec/1000000.0);
  diffp = endt-startt;
  printf("\nSmooth 7: %.4fs (%.4f MPixel/sec)\n",diffp,(paddedHeight*paddedWidth)/(1000000.0f*diffp));

  gettimeofday(&startParaTime,NULL);
  gettimeofday(&endParaTime,NULL);

  startt = startParaTime.tv_sec+(startParaTime.tv_usec/1000000.0);
  endt = endParaTime.tv_sec+(endParaTime.tv_usec/1000000.0);
  diffp = endt-startt;
  printf("\nSmooth 11: %.4fs (%.4f MPixel/sec)\n",diffp,(paddedHeight*paddedWidth*daisy->gradientsNo)/(1000000.0f*diffp));
  gettimeofday(&startParaTime,NULL);
  gettimeofday(&endParaTime,NULL);

  startt = startParaTime.tv_sec+(startParaTime.tv_usec/1000000.0);
  endt = endParaTime.tv_sec+(endParaTime.tv_usec/1000000.0);
  diffp = endt-startt;
  printf("\nSmooth 23: %.4fs (%.4f MPixel/sec)\n",diffp,(paddedHeight*paddedWidth*daisy->gradientsNo)/(1000000.0f*diffp));
  gettimeofday(&endParaTime,NULL);

  startt = startParaTime.tv_sec+(startParaTime.tv_usec/1000000.0);
  endt = endParaTime.tv_sec+(endParaTime.tv_usec/1000000.0);
  diffp = endt-startt;
  printf("\nSmooth 29x: %.4fs (%.4f MPixel/sec)\n",diffp,(paddedHeight*paddedWidth*daisy->gradientsNo)/(1000000.0f*diffp));

  startt = startParaTime.tv_sec+(startParaTime.tv_usec/1000000.0);
  endt = endParaTime.tv_sec+(endParaTime.tv_usec/1000000.0);
  diffp = endt-startt;
  printf("\nSmooth 29y: %.4fs (%.4f MPixel/sec)\n",diffp,(paddedHeight*paddedWidth*daisy->gradientsNo)/(1000000.0f*diffp));


  gettimeofday(&endParaTime,NULL);

  startt = startParaTime.tv_sec+(startParaTime.tv_usec/1000000.0);
  endt = endParaTime.tv_sec+(endParaTime.tv_usec/1000000.0);
  diffp = endt-startt;
  printf("\nTransGradients: %.4fs (%.4f MPixel/sec)\n",diffp,(paddedHeight*paddedWidth*daisy->gradientsNo*daisy->smoothingsNo)/(1000000.0f*diffp));

      gettimeofday(&startDaisyTime,NULL);
      
      gettimeofday(&endDaisyTime,NULL);
      oclError("oclDaisy","clEnqueueNDRangeKernel (11)",error);

      startt = startDaisyTime.tv_sec+(startDaisyTime.tv_usec/1000000.0);
      endt = endDaisyTime.tv_sec+(endDaisyTime.tv_usec/1000000.0);

      diffp = endt-startt;
      printf("\nBlockDaisy: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight) / (1000000.0f*diffp));

    gettimeofday(&endTi,NULL);
    startt = startTi.tv_sec+(startTi.tv_usec/1000000.0);
    endt = endTi.tv_sec+(endTi.tv_usec/1000000.0);
    diffp = endt-startt;
    printf("\nTransferDaisyI: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight) / (1000000.0f*diffp));

  startt = startDaisyTime.tv_sec+(startDaisyTime.tv_usec/1000000.0);
  endt = endDaisyTime.tv_sec+(endDaisyTime.tv_usec/1000000.0);

  diffp = endt-startt;
  printf("\nInitDaisy: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight) / (1000000.0f*diffp));

    startt = startTi.tv_sec+(startTi.tv_usec/1000000.0);
    endt = endTi.tv_sec+(endTi.tv_usec/1000000.0);
    diffp = endt-startt;
    printf("\nTransferDaisyI: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight) / (1000000.0f*diffp));

    startt = startTi.tv_sec+(startTi.tv_usec/1000000.0);
    endt = endTi.tv_sec+(endTi.tv_usec/1000000.0);
    diffp = endt-startt;
    printf("TransferDaisyIII: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight) / (1000000.0f*diffp));

    startt = startTi.tv_sec+(startTi.tv_usec/1000000.0);
    endt = endTi.tv_sec+(endTi.tv_usec/1000000.0);
    diffp = endt-startt;
    printf("TransferDaisyII: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight) / (1000000.0f*diffp));

    startt = startDaisyTime.tv_sec+(startDaisyTime.tv_usec/1000000.0);
    endt = endDaisyTime.tv_sec+(endDaisyTime.tv_usec/1000000.0);
    diffp = endt-startt;
    printf("\nTransferDaisy: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight) / (1000000.0f*diffp));

  startt = startParaTime.tv_sec+(startParaTime.tv_usec/1000000.0);
  endt = endParaTime.tv_sec+(endParaTime.tv_usec/1000000.0);
  difft = endt-startt;
  printf("\nTransDaisy: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight*daisy->gradientsNo*daisy->smoothingsNo)/(1000000.0f*diffp));

  startt = startFullTime.tv_sec+(startFullTime.tv_usec/1000000.0);
  endt = endFullTime.tv_sec+(endFullTime.tv_usec/1000000.0);
  difft = endt-startt;
  printf("\nWholeDaisy: %.4fs (%.4f MPixel/sec)\n",diffp,(daisy->paddedWidth*daisy->paddedHeight) / (1000000.0f*diffp));
  */
